---
# Source: ama-metrics-cpp/templates/ama-metrics-serviceAccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ama-metrics-ccp-serviceaccount
  namespace: 650a838fce846f0001c5a5a3
---
# Source: ama-metrics-cpp/templates/ama-metrics-clusterRole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ama-metrics-ccp-reader
rules:
  - apiGroups: [""]
    resources:
      [
        "pods",
        "nodes",
        "nodes/stats",
        "nodes/metrics",
        "nodes/proxy",
        "namespaces",
        "services",
        "endpoints",
        "ingress"
      ]
    verbs: ["list", "get", "watch"]
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["aad-msi-auth-token"]
    verbs: ["get", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
  - apiGroups: ["clusterconfig.azure.com"]
    resources: ["azureclusteridentityrequests", "azureclusteridentityrequests/status"]
    verbs: ["get", "update", "list", "create"]
---
# Source: ama-metrics-cpp/templates/ama-metrics-clusterRoleBinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ama-metrics-ccp-clusterrolebinding
subjects:
  - kind: ServiceAccount
    name: ama-metrics-ccp-serviceaccount
    namespace: 650a838fce846f0001c5a5a3
roleRef:
  kind: ClusterRole
  name: ama-metrics-ccp-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: ama-metrics-cpp/templates/ama-metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ama-metrics-ccp
  namespace: 650a838fce846f0001c5a5a3
  labels:
    component: ama-metrics-ccp
spec:
  replicas: 1
  revisionHistoryLimit: 2
  paused: false
  selector:
    matchLabels:
      rsName: ama-metrics-ccp
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        rsName: ama-metrics-ccp
        kubernetes.azure.com/managedby: aks
        overlaymgr-ignore: "true"
      annotations:
        agentVersion: "0.0.0.1"
        schema-versions: "v1"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: ama-metrics-ccp-serviceaccount
      initContainers:
        - name: ama-metrics-config-sync
          image: mcr.microsoft.com/oss/kubernetes/kubectl:v1.27.2-linux-amd64-1
          command: [ "/bin/bash", "-c" ]
          args:
            - |
              echo "Watching ama-metrics-settings configmap..."
              settings_file="/etc/config/settings/ama-metrics-settings.json"
              rm /etc/config/settings/inotifysettingscreated
              echo "Reading ama-metrics-settings configmap"
              if result=$(kubectl get configmap ama-metrics-settings-configmap --namespace=kube-system --kubeconfig="$CCP_KUBECONFIG" -o json); then
                echo "$result" > $settings_file
                echo "Configmap written to file"
                for key in $(jq -r '.data | keys | .[]' $settings_file); do
                  value=$(jq -r ".data.\"${key}\"" $settings_file)
                  echo -e "$value" > /etc/config/settings/$key
                  echo "Created file '/etc/config/settings/$key'"
                done
                touch /etc/config/settings/inotifysettingscreated
              else
                echo "Configmap deleted"
                for key in $(jq -r '.data | keys | .[]' $settings_file); do
                  rm /etc/config/settings/$key
                  echo "Removed file '/etc/config/settings/$key'"
                done
                rm $settings_file
                touch /etc/config/settings/inotifysettingscreated
                break
              fi
  
              echo "Finished"
          env:
            - name: CCP_KUBECONFIG
              value: /etc/kubernetes/kubeconfig/kubeconfig.yaml
          volumeMounts:
            - name: kubeconfig
              readOnly: true
              mountPath: /etc/kubernetes/kubeconfig
            - name: settings-vol-config
              mountPath: /etc/config/settings
      containers:
        - name: prometheus-collector
          image: "ninaaksoperatore2e.azurecr.io/prometheus-collector:6.7.0-main-26-07-2023-67"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 150m
              memory: 500Mi
          env:
            - name: CLUSTER
              value: "/subscriptions/18153b17-4e27-4b58-863e-f8105b8892a2/resourceGroups/standalone-2309057cjg7s/providers/Microsoft.ContainerService/managedClusters/standalone-2309057cjg7s-cx-1"
            - name: AKSREGION
              value: "eastus"
            - name: MAC
              value: "true"
            - name: CCP_METRICS_ENABLED
              value: "true"
            - name: AZMON_COLLECT_ENV
              value: "false"
            - name: customEnvironment
              value: "azurepubliccloud"
            - name: OMS_TLD
              value: "opinsights.azure.com"
            - name: CONTROLLER_TYPE
              value: "ReplicaSet"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONTAINER_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.cpu
                  divisor: 1m
            - name: CONTAINER_MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.memory
                  divisor: 1Mi
            - name: NODE_EXPORTER_NAME
              value: "" # Replace this with the node exporter shipped out of box with AKS
            - name: NODE_EXPORTER_TARGETPORT
              value: "19100"
            - name: NODE_EXPORTER_VERSION
              value: "v1.5.0" # Replace this with the version shipped by default
            - name: AGENT_VERSION
              value: 6.7.0-main-26-07-2023-67
            - name: MODE
              value: "advanced" # only supported mode is 'advanced', any other value will be the default/non-advance mode
            - name: WINMODE
              value: ""
            - name: MINIMAL_INGESTION_PROFILE
              value: "true" # false scrapes all metrics
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /etc/config/settings
              name: settings-vol-config
            - mountPath: /etc/config/settings/prometheus
              name: prometheus-config-vol
              readOnly: true
            - name: host-log-containers
              readOnly: true
              mountPath: /var/log/containers
            - name: host-log-pods
              readOnly: true
              mountPath: /var/log/pods
            - mountPath: /anchors/mariner
              name: anchors-mariner
              readOnly: true
            - mountPath: /anchors/ubuntu
              name: anchors-ubuntu
              readOnly: true
            - mountPath: /etc/kubernetes/secrets
              name: kubernetes-secrets
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /opt/microsoft/liveness/livenessprobe.sh
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
        - name: configmap-watcher
          image: "ninaaksoperatore2e.azurecr.io/configmap-watcher:latest"
          command:
            - /configmap-watcher
          args:
            - --configmap-namespace=kube-system
            - --configmap-name=ama-metrics-settings-configmap
            - --kubeconfig-file=/etc/kubernetes/kubeconfig/kubeconfig.yaml
          volumeMounts:
            - name: kubeconfig
              readOnly: true
              mountPath: /etc/kubernetes/kubeconfig
            - name: settings-vol-config
              mountPath: /etc/config/settings
        - name: addon-token-adapter
          command:
            - /addon-token-adapter
          args:
            - --secret-namespace=kube-system
            - --secret-name=aad-msi-auth-token
            - --token-server-listening-port=7777
            - --health-server-listening-port=9999
          image: "mcr.microsoft.com/aks/msi/addon-token-adapter:master.230804.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: AZMON_COLLECT_ENV
              value: "false"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9999
            initialDelaySeconds: 10
            periodSeconds: 60
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 20m
              memory: 30Mi
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_ADMIN
                - NET_RAW
      affinity:
        nodeAffinity:
          # affinity to schedule on to ephemeral os node if its available
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: kubernetes.azure.com/mode
                    operator: In
                    values:
                      - system
            - weight: 50
              preference:
                matchExpressions:
                  - key: azuremonitor/metrics.replica.preferred
                    operator: In
                    values:
                      - "true"
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: type
                    operator: NotIn
                    values:
                      - virtual-kubelet
                  - key: kubernetes.azure.com/cluster
                    operator: Exists
      volumes:
        - name: settings-vol-config
          emptyDir: { }
        - name: prometheus-config-vol
          configMap:
            name: ama-metrics-prometheus-config
            optional: true
        - name: kubeconfig
          secret:
            secretName: kubeconfig-file
        - name: host-log-containers
          hostPath:
            path: /var/log/containers
        - name: host-log-pods
          hostPath:
            path: /var/log/pods
        - name: anchors-mariner
          hostPath:
            path: /etc/pki/ca-trust/anchors/
            type: DirectoryOrCreate
        - name: anchors-ubuntu
          hostPath:
            path: /usr/local/share/ca-certificates/
            type: DirectoryOrCreate
        - name: kubernetes-secrets
          projected:
            defaultMode: 420
            sources:
              - secret:
                  name: kube-apiserver-ssl
              - secret:
                  name: kube-apiserver-token
              - secret:
                  name: etcd-client-tls
